[tox]
isolated_build = true
minversion = 3.4.0

envlist =
    clean
    linting
    py{39,310,311,py3}
    report
    docs

[gh-actions]
python =
    3.9: py39
    3.10: py310
    3.11: py311
    pypy39: pypy3.9
    pypy310: pypy3.10


[testenv]
passenv =
    GITHUB_*

setenv =
    DEBUG_GENERIC_LEXER = true
    DOCTEST_COVERAGE = -p --context="doctest-{envname}"
    PYTEST_COVERAGE = -p --context="pytest-{envname}"

deps =
    coverage
    pytest
    sphinx-autodoc-typehints

depends =
    py{36,37,38,39,py3}: clean, linting
    {report,docs}: py{36,37,38,39,py3}

commands =
    coverage run {env:PYTEST_COVERAGE} \
        --source="{envsitepackagesdir}/generic_lexer" \
        -m pytest
    coverage run {env:DOCTEST_COVERAGE} \
        --source="src/generic_lexer" \
        -m sphinx \
        -b doctest docs \
        {toxinidir}/docs/build/doctest


[testenv:linting]
skip_install = true
deps =
    pylama
    mypy

commands =
    pylama src tests
    mypy --config-file=tox.ini src tests


[testenv:clean]
skip_install = true
deps = coverage
commands = coverage erase


[testenv:docs]
skip_install = true
deps = sphinx-autodoc-typehints
commands =
    sphinx-apidoc -f \
        -t {toxinidir}/docs/templates/apidoc \
        -o {toxinidir}/docs/api \
        {toxinidir}/src/generic_lexer
    sphinx-build \
        -j auto \
        -b html \
        {toxinidir}/docs \
        {toxinidir}/docs/build/html


[testenv:report]
skip_install = true
deps = coverage
commands =
    coverage combine
    coverage html -i
    coverage xml -i


[mypy]
ignore_missing_imports = true
check_untyped_defs = true
follow_imports = silent
color_output = false
error_summary = false

[pylama]
skip =
    */.tox/*
    */.venv/*
    */docs/*

[coverage:paths]
source =
    src/generic_lexer
    */site-packages/generic_lexer


[coverage:run]
data_file = .coverage/main


[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:


[coverage:html]
directory = .coverage/html


[coverage:xml]
output = .coverage/coverage.xml


[isort]
profile = black
